// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: meta.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetaServiceClient is the client API for MetaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetaServiceClient interface {
	UploadMeta(ctx context.Context, in *UplodaMetaRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	GetMetaById(ctx context.Context, in *GetMetaByIdRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	GetMetaByUser(ctx context.Context, in *GetMetaByUserRequest, opts ...grpc.CallOption) (*GetMetaByUserResponse, error)
	GetAllMeta(ctx context.Context, in *GetAllMetaRequest, opts ...grpc.CallOption) (*GetAllMetaResponse, error)
	DeleteMetaById(ctx context.Context, in *DeleteMetaByIdRequest, opts ...grpc.CallOption) (*MetaResponse, error)
	DeleteMetaByUser(ctx context.Context, in *DeleteMetaByUserRequest, opts ...grpc.CallOption) (*DeleteMetaByUserResponse, error)
	UpdateMeta(ctx context.Context, in *UpdateMetaRequest, opts ...grpc.CallOption) (*MetaResponse, error)
}

type metaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaServiceClient(cc grpc.ClientConnInterface) MetaServiceClient {
	return &metaServiceClient{cc}
}

func (c *metaServiceClient) UploadMeta(ctx context.Context, in *UplodaMetaRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, "/meta.MetaService/UploadMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) GetMetaById(ctx context.Context, in *GetMetaByIdRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, "/meta.MetaService/GetMetaById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) GetMetaByUser(ctx context.Context, in *GetMetaByUserRequest, opts ...grpc.CallOption) (*GetMetaByUserResponse, error) {
	out := new(GetMetaByUserResponse)
	err := c.cc.Invoke(ctx, "/meta.MetaService/GetMetaByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) GetAllMeta(ctx context.Context, in *GetAllMetaRequest, opts ...grpc.CallOption) (*GetAllMetaResponse, error) {
	out := new(GetAllMetaResponse)
	err := c.cc.Invoke(ctx, "/meta.MetaService/GetAllMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) DeleteMetaById(ctx context.Context, in *DeleteMetaByIdRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, "/meta.MetaService/DeleteMetaById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) DeleteMetaByUser(ctx context.Context, in *DeleteMetaByUserRequest, opts ...grpc.CallOption) (*DeleteMetaByUserResponse, error) {
	out := new(DeleteMetaByUserResponse)
	err := c.cc.Invoke(ctx, "/meta.MetaService/DeleteMetaByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metaServiceClient) UpdateMeta(ctx context.Context, in *UpdateMetaRequest, opts ...grpc.CallOption) (*MetaResponse, error) {
	out := new(MetaResponse)
	err := c.cc.Invoke(ctx, "/meta.MetaService/UpdateMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaServiceServer is the server API for MetaService service.
// All implementations must embed UnimplementedMetaServiceServer
// for forward compatibility
type MetaServiceServer interface {
	UploadMeta(context.Context, *UplodaMetaRequest) (*MetaResponse, error)
	GetMetaById(context.Context, *GetMetaByIdRequest) (*MetaResponse, error)
	GetMetaByUser(context.Context, *GetMetaByUserRequest) (*GetMetaByUserResponse, error)
	GetAllMeta(context.Context, *GetAllMetaRequest) (*GetAllMetaResponse, error)
	DeleteMetaById(context.Context, *DeleteMetaByIdRequest) (*MetaResponse, error)
	DeleteMetaByUser(context.Context, *DeleteMetaByUserRequest) (*DeleteMetaByUserResponse, error)
	UpdateMeta(context.Context, *UpdateMetaRequest) (*MetaResponse, error)
	mustEmbedUnimplementedMetaServiceServer()
}

// UnimplementedMetaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetaServiceServer struct {
}

func (UnimplementedMetaServiceServer) UploadMeta(context.Context, *UplodaMetaRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadMeta not implemented")
}
func (UnimplementedMetaServiceServer) GetMetaById(context.Context, *GetMetaByIdRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetaById not implemented")
}
func (UnimplementedMetaServiceServer) GetMetaByUser(context.Context, *GetMetaByUserRequest) (*GetMetaByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetaByUser not implemented")
}
func (UnimplementedMetaServiceServer) GetAllMeta(context.Context, *GetAllMetaRequest) (*GetAllMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMeta not implemented")
}
func (UnimplementedMetaServiceServer) DeleteMetaById(context.Context, *DeleteMetaByIdRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMetaById not implemented")
}
func (UnimplementedMetaServiceServer) DeleteMetaByUser(context.Context, *DeleteMetaByUserRequest) (*DeleteMetaByUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMetaByUser not implemented")
}
func (UnimplementedMetaServiceServer) UpdateMeta(context.Context, *UpdateMetaRequest) (*MetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMeta not implemented")
}
func (UnimplementedMetaServiceServer) mustEmbedUnimplementedMetaServiceServer() {}

// UnsafeMetaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaServiceServer will
// result in compilation errors.
type UnsafeMetaServiceServer interface {
	mustEmbedUnimplementedMetaServiceServer()
}

func RegisterMetaServiceServer(s grpc.ServiceRegistrar, srv MetaServiceServer) {
	s.RegisterService(&MetaService_ServiceDesc, srv)
}

func _MetaService_UploadMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UplodaMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).UploadMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta.MetaService/UploadMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).UploadMeta(ctx, req.(*UplodaMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_GetMetaById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetaByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).GetMetaById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta.MetaService/GetMetaById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).GetMetaById(ctx, req.(*GetMetaByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_GetMetaByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetaByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).GetMetaByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta.MetaService/GetMetaByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).GetMetaByUser(ctx, req.(*GetMetaByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_GetAllMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).GetAllMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta.MetaService/GetAllMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).GetAllMeta(ctx, req.(*GetAllMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_DeleteMetaById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMetaByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).DeleteMetaById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta.MetaService/DeleteMetaById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).DeleteMetaById(ctx, req.(*DeleteMetaByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_DeleteMetaByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMetaByUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).DeleteMetaByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta.MetaService/DeleteMetaByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).DeleteMetaByUser(ctx, req.(*DeleteMetaByUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetaService_UpdateMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaServiceServer).UpdateMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/meta.MetaService/UpdateMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaServiceServer).UpdateMeta(ctx, req.(*UpdateMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetaService_ServiceDesc is the grpc.ServiceDesc for MetaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "meta.MetaService",
	HandlerType: (*MetaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadMeta",
			Handler:    _MetaService_UploadMeta_Handler,
		},
		{
			MethodName: "GetMetaById",
			Handler:    _MetaService_GetMetaById_Handler,
		},
		{
			MethodName: "GetMetaByUser",
			Handler:    _MetaService_GetMetaByUser_Handler,
		},
		{
			MethodName: "GetAllMeta",
			Handler:    _MetaService_GetAllMeta_Handler,
		},
		{
			MethodName: "DeleteMetaById",
			Handler:    _MetaService_DeleteMetaById_Handler,
		},
		{
			MethodName: "DeleteMetaByUser",
			Handler:    _MetaService_DeleteMetaByUser_Handler,
		},
		{
			MethodName: "UpdateMeta",
			Handler:    _MetaService_UpdateMeta_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "meta.proto",
}
